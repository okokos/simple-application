1.
Clean install and run with:
curl http://localhost:8080/

2. resources git
git:
https://github.com

3. images resources
Quay:
https://quay.io/repository/

4.
# Create a new repository on the command line in GITHUB
git init
git add README.md
git add.
git commit -m "first commit"
git remote add origin https://github.com/okokos/simple-application.git
git push -u origin master

4.
POM aanpassing
Voor dat je de applicatie naar Quattro kan deployen moeten 2 aanpassingen in de POM van tro-application, een file remove van logback.xml en de branch verwijzing quattro in .gitlab-ci.yml worden aangepast:
a. De packaging moet van WAR naar JAR voor docker:
...
 <packaging>jar</packaging>
...
b. In de build-plugins sectie moet de main class referentie worden gezet (JAR project heeft het nodig):
...
  <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>nl.rijksoverheid.ocw.ivho.tro.TroApplication</mainClass>
                </configuration>
            </plugin>
....
c. set  <finalName>simple.application</finalName> for same name
d. Verwijder tro-application/src/main/resources/logback.xml file als dat nodig is in Quattro.

5. run mvn clean install to create jar file

6. create image Docker using de jar with podman
https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices
https://access.redhat.com/documentation/en-us/openshift_container_platform/4.5/html-single/images/creating-images
$ podman build -t simpleapplication .
$ podman images
REPOSITORY                           TAG         IMAGE ID      CREATED         SIZE
localhost/simpleapplication          latest      520db14bdc27  6 seconds ago   234 MB
$ podman run simpleapplication
$ podman ps

7. Tag image to send to image repository quai
$ podman tag simpleapplication quay.io/skostany/simpleapplication
$ podman login quay.io -u skostany
$ podman push quay.io/skostany/simpleapplication
After pushing check de "Vulnerabilities"

8. deploy S2I
install:
https://tomd.xyz/openshift-s2i-example/#what-exactly-is-a-buildconfig
simple matrix:
https://github.com/monodot/simple-camel-spring-boot-app/blob/master/pom.xml
create file buildspec and add POM specs.

a. login to oc:
$ oc login
b. create project
$ oc new-project ivho-sk-application

c. deploy:

- S2I (werkt nog niet)
$ oc new-build registry.access.redhat.com/ubi8/openjdk-11~https://github.com/okokos/simple-application.git#feature/stepone --name=simpleapplication

- met image uit quai (route nog niet open)
$ oc new-app --name simpleapplication quay.io/skostany/simpleapplication
$ oc status
$ oc get pods -w
$ oc logs --tail 3 podnaam
$ oc describe deployment simpleapplication
$ oc expose svc/simpleapplication
$ oc get route/simpleapplication
$ oc get pods
$ curl http://simpleapplication-ivho-sk-application.apps.ontw-test.ocw.rijksapps.nl/

load from git/POM
oc new-app --name jhost -i redhat-openjdk18-openshift:1.8 https://github.com/okokos/DO288-apps#manage-builds --context-dir java-serverhost
oc logs -f buildconfig/jhost

oc new-app --name simpleone -i redhat-openjdk18-openshift:1.8 https://github.com/okokos/DO288-apps#manage-builds --context-dir java-serverhost
